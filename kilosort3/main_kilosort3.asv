%% you need to change most of the paths in this block

%addpath(genpath('C:\Github\sjlab\kilosort3')) % path to kilosort folder
%addpath('D:\GitHub\npy-matlab') % for converting to Phy
rootDir= 'Z:\projects\FlexiVexi\behavioural_data';
Animal_ID='98';

sessionList = dir(fullfile(rootDir, Animal_ID));

filelist_ephys = dir(fullfile(rootDir, Animal_ID,'**', '*continuous.dat'));

for i=1:length(filelist_ephys)
    
    sessionFolder = extractBetween(filelist_ephys(i).folder,strcat(filesep,Animal_ID,filesep), filesep);
    sessionPath = fullfile(extractBefore(filelist_ephys(i).folder,sessionFolder), sessionFolder);

    if ~isempty(fullfile(sessionPath, '**', '*amplitudes.npy')) % check if kilosort has already been run on this session

        rootZ = sessionPath;
    
        rootH = 'D:\'; % path to temporary binary file (same size as data, should be on fast SSD)
        pathToYourConfigFile = 'C:\Github\sjlab\kilosort3\configFiles'; % take from Github folder and put it somewhere else (together with the master_file)
        chanMapFile = 'chanMap_Npx2p0.mat';
        
        ops.trange    = [0 Inf]; % time range to sort
        ops.NchanTOT  = 385; % total number of channels in your recording
        
        run(fullfile(pathToYourConfigFile, 'configFile384.m'))
        ops.fproc   = fullfile(rootH, 'temp_wh.dat'); % proc file on a fast SSD
        ops.chanMap = fullfile(pathToYourConfigFile, chanMapFile);
        %% this block runs all the steps of the algorithm
        fprintf('Looking for data inside %s \n', rootZ)
        
        % main parameter changes from Kilosort2 to v2.5
        ops.sig        = 20;  % spatial smoothness constant for registration
        ops.fshigh     = 300; % high-pass more aggresively
        ops.nblocks    = 5; % blocks for registration. 0 turns it off, 1 does rigid registration. Replaces "datashift" option. 
        
        % main parameter changes from Kilosort2.5 to v3.0
        ops.Th       = [9 9];
        
        % is there a channel map file in this folder?
        fs = dir(fullfile(pathToYourConfigFile, 'chan*.mat'));
        if ~isempty(fs)
            ops.chanMap = fullfile(fs(1).folder, fs(1).name);
        end
        
        % find the binary file
        fs          = [dir(fullfile(rootZ, '**','*.bin')) dir(fullfile(rootZ, '**', '*.dat'))];
        ops.fbinary = fullfile(fs(2).folder, fs(2).name);
        
        rez                = preprocessDataSub(ops);
        rez                = datashift2(rez, 1);
        print("I'm in line 40");
        [rez, st3, tF]     = extract_spikes(rez);
        print("I'm in line 42");
        rez                = template_learning(rez, tF, st3);
        print("I'm in line 44");
        [rez, st3, tF]     = trackAndSort(rez);
        print("I'm in line 46");
        rez                = final_clustering(rez, tF, st3);
        print("I'm in line 48");
        rez                = find_merges(rez, 1);
        
        rootZ = fullfile(rootZ, 'kilosort3');
        mkdir(rootZ)
        rezToPhy2(rez, rootZ);
    
        close all

    else
        print(strcat("Kilosort has already been run on session ", sessionFolder, ". Skipping analysis of this session."));
    end

end
